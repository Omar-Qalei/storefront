{"remainingRequest":"C:\\Users\\omar-\\Desktop\\vue\\vue-grid-layout\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\omar-\\Desktop\\vue\\vue-grid-layout\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\omar-\\Desktop\\vue\\vue-grid-layout\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\omar-\\Desktop\\vue\\vue-grid-layout\\src\\App.vue?vue&type=template&id=7ba5bd90&","dependencies":[{"path":"C:\\Users\\omar-\\Desktop\\vue\\vue-grid-layout\\src\\App.vue","mtime":1620686722615},{"path":"C:\\Users\\omar-\\Desktop\\vue\\vue-grid-layout\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\omar-\\Desktop\\vue\\vue-grid-layout\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\omar-\\Desktop\\vue\\vue-grid-layout\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\omar-\\Desktop\\vue\\vue-grid-layout\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\"div\", { attrs: { id: \"app\" } }, [\n    _c(\"h1\", { staticStyle: { \"text-align\": \"center\" } }, [\n      _vm._v(\"Vue Grid Layout\")\n    ]),\n    _c(\"div\", [\n      _c(\"div\", { staticClass: \"layoutJSON\" }, [\n        _vm._v(\"\\n      Displayed as \"),\n        _c(\"code\", [_vm._v(\"[x, y, w, h]\")]),\n        _vm._v(\":\\n      \"),\n        _c(\n          \"div\",\n          { staticClass: \"columns\" },\n          _vm._l(_vm.layout, function(item) {\n            return _c(\"div\", { key: item.i, staticClass: \"layoutItem\" }, [\n              _c(\"b\", [_vm._v(_vm._s(item.i))]),\n              _vm._v(\n                \": [\" +\n                  _vm._s(item.x) +\n                  \", \" +\n                  _vm._s(item.y) +\n                  \", \" +\n                  _vm._s(item.w) +\n                  \", \" +\n                  _vm._s(item.h) +\n                  \"]\\n        \"\n              )\n            ])\n          }),\n          0\n        )\n      ])\n    ]),\n    _c(\n      \"div\",\n      { attrs: { id: \"content\" } },\n      [\n        _c(\"button\", { on: { click: _vm.decreaseWidth } }, [\n          _vm._v(\"Decrease Width\")\n        ]),\n        _c(\"button\", { on: { click: _vm.increaseWidth } }, [\n          _vm._v(\"Increase Width\")\n        ]),\n        _c(\"button\", { on: { click: _vm.addItem } }, [_vm._v(\"Add an item\")]),\n        _c(\"button\", { on: { click: _vm.addItemDynamically } }, [\n          _vm._v(\"Add an item dynamically\")\n        ]),\n        _c(\"button\", { on: { click: _vm.changeDirection } }, [\n          _vm._v(\"Change Direction\")\n        ]),\n        _c(\"input\", {\n          directives: [\n            {\n              name: \"model\",\n              rawName: \"v-model\",\n              value: _vm.draggable,\n              expression: \"draggable\"\n            }\n          ],\n          attrs: { type: \"checkbox\" },\n          domProps: {\n            checked: Array.isArray(_vm.draggable)\n              ? _vm._i(_vm.draggable, null) > -1\n              : _vm.draggable\n          },\n          on: {\n            change: function($event) {\n              var $$a = _vm.draggable,\n                $$el = $event.target,\n                $$c = $$el.checked ? true : false\n              if (Array.isArray($$a)) {\n                var $$v = null,\n                  $$i = _vm._i($$a, $$v)\n                if ($$el.checked) {\n                  $$i < 0 && (_vm.draggable = $$a.concat([$$v]))\n                } else {\n                  $$i > -1 &&\n                    (_vm.draggable = $$a\n                      .slice(0, $$i)\n                      .concat($$a.slice($$i + 1)))\n                }\n              } else {\n                _vm.draggable = $$c\n              }\n            }\n          }\n        }),\n        _vm._v(\" Draggable\\n    \"),\n        _c(\"input\", {\n          directives: [\n            {\n              name: \"model\",\n              rawName: \"v-model\",\n              value: _vm.resizable,\n              expression: \"resizable\"\n            }\n          ],\n          attrs: { type: \"checkbox\" },\n          domProps: {\n            checked: Array.isArray(_vm.resizable)\n              ? _vm._i(_vm.resizable, null) > -1\n              : _vm.resizable\n          },\n          on: {\n            change: function($event) {\n              var $$a = _vm.resizable,\n                $$el = $event.target,\n                $$c = $$el.checked ? true : false\n              if (Array.isArray($$a)) {\n                var $$v = null,\n                  $$i = _vm._i($$a, $$v)\n                if ($$el.checked) {\n                  $$i < 0 && (_vm.resizable = $$a.concat([$$v]))\n                } else {\n                  $$i > -1 &&\n                    (_vm.resizable = $$a\n                      .slice(0, $$i)\n                      .concat($$a.slice($$i + 1)))\n                }\n              } else {\n                _vm.resizable = $$c\n              }\n            }\n          }\n        }),\n        _vm._v(\" Resizable\\n    \"),\n        _c(\"input\", {\n          directives: [\n            {\n              name: \"model\",\n              rawName: \"v-model\",\n              value: _vm.mirrored,\n              expression: \"mirrored\"\n            }\n          ],\n          attrs: { type: \"checkbox\" },\n          domProps: {\n            checked: Array.isArray(_vm.mirrored)\n              ? _vm._i(_vm.mirrored, null) > -1\n              : _vm.mirrored\n          },\n          on: {\n            change: function($event) {\n              var $$a = _vm.mirrored,\n                $$el = $event.target,\n                $$c = $$el.checked ? true : false\n              if (Array.isArray($$a)) {\n                var $$v = null,\n                  $$i = _vm._i($$a, $$v)\n                if ($$el.checked) {\n                  $$i < 0 && (_vm.mirrored = $$a.concat([$$v]))\n                } else {\n                  $$i > -1 &&\n                    (_vm.mirrored = $$a\n                      .slice(0, $$i)\n                      .concat($$a.slice($$i + 1)))\n                }\n              } else {\n                _vm.mirrored = $$c\n              }\n            }\n          }\n        }),\n        _vm._v(\" Mirrored\\n    \"),\n        _c(\"input\", {\n          directives: [\n            {\n              name: \"model\",\n              rawName: \"v-model\",\n              value: _vm.responsive,\n              expression: \"responsive\"\n            }\n          ],\n          attrs: { type: \"checkbox\" },\n          domProps: {\n            checked: Array.isArray(_vm.responsive)\n              ? _vm._i(_vm.responsive, null) > -1\n              : _vm.responsive\n          },\n          on: {\n            change: function($event) {\n              var $$a = _vm.responsive,\n                $$el = $event.target,\n                $$c = $$el.checked ? true : false\n              if (Array.isArray($$a)) {\n                var $$v = null,\n                  $$i = _vm._i($$a, $$v)\n                if ($$el.checked) {\n                  $$i < 0 && (_vm.responsive = $$a.concat([$$v]))\n                } else {\n                  $$i > -1 &&\n                    (_vm.responsive = $$a\n                      .slice(0, $$i)\n                      .concat($$a.slice($$i + 1)))\n                }\n              } else {\n                _vm.responsive = $$c\n              }\n            }\n          }\n        }),\n        _vm._v(\" Responsive\\n    \"),\n        _c(\"input\", {\n          directives: [\n            {\n              name: \"model\",\n              rawName: \"v-model\",\n              value: _vm.preventCollision,\n              expression: \"preventCollision\"\n            }\n          ],\n          attrs: { type: \"checkbox\" },\n          domProps: {\n            checked: Array.isArray(_vm.preventCollision)\n              ? _vm._i(_vm.preventCollision, null) > -1\n              : _vm.preventCollision\n          },\n          on: {\n            change: function($event) {\n              var $$a = _vm.preventCollision,\n                $$el = $event.target,\n                $$c = $$el.checked ? true : false\n              if (Array.isArray($$a)) {\n                var $$v = null,\n                  $$i = _vm._i($$a, $$v)\n                if ($$el.checked) {\n                  $$i < 0 && (_vm.preventCollision = $$a.concat([$$v]))\n                } else {\n                  $$i > -1 &&\n                    (_vm.preventCollision = $$a\n                      .slice(0, $$i)\n                      .concat($$a.slice($$i + 1)))\n                }\n              } else {\n                _vm.preventCollision = $$c\n              }\n            }\n          }\n        }),\n        _vm._v(\" Prevent Collision\\n    \"),\n        _c(\n          \"div\",\n          { staticStyle: { \"margin-top\": \"10px\", \"margin-bottom\": \"10px\" } },\n          [\n            _vm._v(\"\\n      Row Height: \"),\n            _c(\"input\", {\n              directives: [\n                {\n                  name: \"model\",\n                  rawName: \"v-model\",\n                  value: _vm.rowHeight,\n                  expression: \"rowHeight\"\n                }\n              ],\n              attrs: { type: \"number\" },\n              domProps: { value: _vm.rowHeight },\n              on: {\n                input: function($event) {\n                  if ($event.target.composing) {\n                    return\n                  }\n                  _vm.rowHeight = $event.target.value\n                }\n              }\n            }),\n            _vm._v(\" Col nums:\\n      \"),\n            _c(\"input\", {\n              directives: [\n                {\n                  name: \"model\",\n                  rawName: \"v-model\",\n                  value: _vm.colNum,\n                  expression: \"colNum\"\n                }\n              ],\n              attrs: { type: \"number\" },\n              domProps: { value: _vm.colNum },\n              on: {\n                input: function($event) {\n                  if ($event.target.composing) {\n                    return\n                  }\n                  _vm.colNum = $event.target.value\n                }\n              }\n            }),\n            _vm._v(\" Margin x:\\n      \"),\n            _c(\"input\", {\n              directives: [\n                {\n                  name: \"model\",\n                  rawName: \"v-model\",\n                  value: _vm.marginX,\n                  expression: \"marginX\"\n                }\n              ],\n              attrs: { type: \"number\" },\n              domProps: { value: _vm.marginX },\n              on: {\n                input: function($event) {\n                  if ($event.target.composing) {\n                    return\n                  }\n                  _vm.marginX = $event.target.value\n                }\n              }\n            }),\n            _vm._v(\" Margin y:\\n      \"),\n            _c(\"input\", {\n              directives: [\n                {\n                  name: \"model\",\n                  rawName: \"v-model\",\n                  value: _vm.marginY,\n                  expression: \"marginY\"\n                }\n              ],\n              attrs: { type: \"number\" },\n              domProps: { value: _vm.marginY },\n              on: {\n                input: function($event) {\n                  if ($event.target.composing) {\n                    return\n                  }\n                  _vm.marginY = $event.target.value\n                }\n              }\n            })\n          ]\n        ),\n        _c(\n          \"grid-layout\",\n          {\n            attrs: {\n              margin: [parseInt(_vm.marginX), parseInt(_vm.marginY)],\n              layout: _vm.layout,\n              \"col-num\": parseInt(_vm.colNum),\n              \"row-height\": _vm.rowHeight,\n              \"is-draggable\": _vm.draggable,\n              \"is-resizable\": _vm.resizable,\n              \"is-mirrored\": _vm.mirrored,\n              \"prevent-collision\": _vm.preventCollision,\n              \"vertical-compact\": _vm.compact,\n              \"use-css-transforms\": true,\n              responsive: _vm.responsive,\n              allowCollides: true\n            },\n            on: {\n              \"update:layout\": function($event) {\n                _vm.layout = $event\n              },\n              \"layout-created\": _vm.layoutCreatedEvent,\n              \"layout-before-mount\": _vm.layoutBeforeMountEvent,\n              \"layout-mounted\": _vm.layoutMountedEvent,\n              \"layout-ready\": _vm.layoutReadyEvent,\n              \"layout-updated\": _vm.layoutUpdatedEvent,\n              \"breakpoint-changed\": _vm.breakpointChangedEvent,\n              layoutHeight: _vm.layoutHeight\n            }\n          },\n          _vm._l(_vm.layout, function(item) {\n            return _c(\n              \"grid-item\",\n              {\n                key: item.i,\n                attrs: {\n                  static: item.static,\n                  x: item.x,\n                  y: item.y,\n                  w: item.w,\n                  h: item.h,\n                  i: item.i,\n                  \"min-w\": item.minW,\n                  \"max-w\": item.maxW,\n                  \"min-x\": item.minX,\n                  \"max-x\": item.maxX,\n                  \"min-y\": item.minY,\n                  \"max-y\": item.maxY,\n                  \"preserve-aspect-ratio\": item.preserveAspectRatio\n                },\n                on: {\n                  resize: _vm.resize,\n                  move: _vm.move,\n                  resized: _vm.resized,\n                  \"container-resized\": _vm.containerResized,\n                  moved: _vm.moved\n                }\n              },\n              [\n                _c(\"test-element\", {\n                  attrs: { text: item.i },\n                  on: {\n                    removeItem: function($event) {\n                      return _vm.removeItem($event)\n                    }\n                  }\n                })\n              ],\n              1\n            )\n          }),\n          1\n        ),\n        _c(\"hr\")\n      ],\n      1\n    )\n  ])\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }"]}