{"remainingRequest":"C:\\Users\\omar-\\Desktop\\vue\\vue-grid-layout\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\omar-\\Desktop\\vue\\vue-grid-layout\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\omar-\\Desktop\\vue\\vue-grid-layout\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\omar-\\Desktop\\vue\\vue-grid-layout\\src\\components\\GridLayout.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\omar-\\Desktop\\vue\\vue-grid-layout\\src\\components\\GridLayout.vue","mtime":1620686478707},{"path":"C:\\Users\\omar-\\Desktop\\vue\\vue-grid-layout\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\omar-\\Desktop\\vue\\vue-grid-layout\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Users\\omar-\\Desktop\\vue\\vue-grid-layout\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\omar-\\Desktop\\vue\\vue-grid-layout\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.number.is-finite\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _defineProperty from \"C:/Users/omar-/Desktop/vue/vue-grid-layout/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport \"core-js/modules/es6.number.constructor\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Vue from \"vue\";\n\nvar elementResizeDetectorMaker = require(\"element-resize-detector\");\n\nimport { bottom, compact, getLayoutItem, moveElement, validateLayout, cloneLayout, getAllCollisions, getAllowCollides } from \"@/helpers/utils\";\nimport { getBreakpointFromWidth, getColsFromBreakpoint, findOrGenerateResponsiveLayout } from \"@/helpers/responsiveUtils\"; //var eventBus = require('./eventBus');\n\nimport GridItem from \"./GridItem.vue\";\nimport { addWindowEventListener, removeWindowEventListener } from \"@/helpers/DOM\";\nexport default {\n  name: \"GridLayout\",\n  provide: function provide() {\n    return {\n      eventBus: null,\n      layout: this\n    };\n  },\n  components: {\n    GridItem: GridItem\n  },\n  props: {\n    // If true, the container height swells and contracts to fit contents\n    autoSize: {\n      type: Boolean,\n      default: true\n    },\n    colNum: {\n      type: Number,\n      default: 12\n    },\n    rowHeight: {\n      type: Number,\n      default: 150\n    },\n    maxRows: {\n      type: Number,\n      default: Infinity\n    },\n    margin: {\n      type: Array,\n      default: function _default() {\n        return [10, 10];\n      }\n    },\n    isDraggable: {\n      type: Boolean,\n      default: true\n    },\n    isResizable: {\n      type: Boolean,\n      default: true\n    },\n    isMirrored: {\n      type: Boolean,\n      default: false\n    },\n    useCssTransforms: {\n      type: Boolean,\n      default: true\n    },\n    verticalCompact: {\n      type: Boolean,\n      default: true\n    },\n    layout: {\n      type: Array,\n      required: true\n    },\n    responsive: {\n      type: Boolean,\n      default: false\n    },\n    responsiveLayouts: {\n      type: Object,\n      default: function _default() {\n        return {};\n      }\n    },\n    breakpoints: {\n      type: Object,\n      default: function _default() {\n        return {\n          lg: 1200,\n          md: 996,\n          sm: 768,\n          xs: 480,\n          xxs: 0\n        };\n      }\n    },\n    cols: {\n      type: Object,\n      default: function _default() {\n        return {\n          lg: 12,\n          md: 10,\n          sm: 6,\n          xs: 4,\n          xxs: 2\n        };\n      }\n    },\n    preventCollision: {\n      type: Boolean,\n      default: false\n    },\n    useStyleCursor: {\n      type: Boolean,\n      default: true\n    },\n    minH: {\n      type: Number,\n      default: null\n    },\n    allowCollides: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data: function data() {\n    return {\n      width: null,\n      mergedStyle: {},\n      lastLayoutLength: 0,\n      isDragging: false,\n      newBreakpoint: \"\",\n      placeholder: [],\n      layouts: {},\n      // array to store all layouts from different breakpoints\n      lastBreakpoint: null,\n      // store last active breakpoint\n      originalLayout: null // store original Layout\n\n    };\n  },\n  created: function created() {\n    var self = this; // Accessible refernces of functions for removing in beforeDestroy\n\n    self.resizeEventHandler = function (eventType, i, x, y, h, w) {\n      self.resizeEvent(eventType, i, x, y, h, w);\n    };\n\n    self.dragEventHandler = function (eventType, i, x, y, h, w) {\n      self.dragEvent(eventType, i, x, y, h, w);\n    };\n\n    self._provided.eventBus = new Vue();\n    self.eventBus = self._provided.eventBus;\n    self.eventBus.$on(\"resizeEvent\", self.resizeEventHandler);\n    self.eventBus.$on(\"dragEvent\", self.dragEventHandler);\n    self.$emit(\"layout-created\", self.layout);\n    getAllowCollides(this.allowCollides);\n  },\n  beforeDestroy: function beforeDestroy() {\n    //Remove listeners\n    this.eventBus.$off(\"resizeEvent\", this.resizeEventHandler);\n    this.eventBus.$off(\"dragEvent\", this.dragEventHandler);\n    this.eventBus.$destroy();\n    removeWindowEventListener(\"resize\", this.onWindowResize);\n\n    if (this.erd) {\n      this.erd.uninstall(this.$refs.item);\n    }\n  },\n  beforeMount: function beforeMount() {\n    this.$emit(\"layout-before-mount\", this.layout);\n  },\n  mounted: function mounted() {\n    this.$emit(\"layout-mounted\", this.layout);\n    this.$nextTick(function () {\n      validateLayout(this.layout);\n      this.originalLayout = this.layout;\n      var self = this;\n      this.$nextTick(function () {\n        self.onWindowResize();\n        self.initResponsiveFeatures(); //self.width = self.$el.offsetWidth;\n\n        addWindowEventListener(\"resize\", self.onWindowResize); //\n\n        compact(self.layout, self.verticalCompact);\n        self.$emit(\"layout-updated\", self.layout);\n        self.updateHeight();\n        self.$nextTick(function () {\n          this.erd = elementResizeDetectorMaker({\n            strategy: \"scroll\",\n            //<- For ultra performance.\n            // See https://github.com/wnr/element-resize-detector/issues/110 about callOnAdd.\n            callOnAdd: false\n          });\n          this.erd.listenTo(self.$refs.item, function () {\n            self.onWindowResize();\n          });\n        });\n      });\n    });\n  },\n  watch: {\n    width: function width(newval, oldval) {\n      var self = this;\n      this.$nextTick(function () {\n        var _this = this;\n\n        //this.$broadcast(\"updateWidth\", this.width);\n        this.eventBus.$emit(\"updateWidth\", this.width);\n\n        if (oldval === null) {\n          /*\r\n                            If oldval == null is when the width has never been\r\n                            set before. That only occurs when mouting is\r\n                            finished, and onWindowResize has been called and\r\n                            this.width has been changed the first time after it\r\n                            got set to null in the constructor. It is now time\r\n                            to issue layout-ready events as the GridItems have\r\n                            their sizes configured properly.\r\n                              The reason for emitting the layout-ready events on\r\n                            the next tick is to allow for the newly-emitted\r\n                            updateWidth event (above) to have reached the\r\n                            children GridItem-s and had their effect, so we're\r\n                            sure that they have the final size before we emit\r\n                            layout-ready (for this GridLayout) and\r\n                            item-layout-ready (for the GridItem-s).\r\n                              This way any client event handlers can reliably\r\n                            invistigate stable sizes of GridItem-s.\r\n                        */\n          this.$nextTick(function () {\n            _this.$emit(\"layout-ready\", self.layout);\n          });\n        }\n\n        this.updateHeight();\n      });\n    },\n    layout: function layout() {\n      this.layoutUpdate();\n    },\n    colNum: function colNum(val) {\n      this.eventBus.$emit(\"setColNum\", val);\n    },\n    rowHeight: function rowHeight() {\n      this.eventBus.$emit(\"setRowHeight\", this.rowHeight);\n    },\n    isDraggable: function isDraggable() {\n      this.eventBus.$emit(\"setDraggable\", this.isDraggable);\n    },\n    isResizable: function isResizable() {\n      this.eventBus.$emit(\"setResizable\", this.isResizable);\n    },\n    responsive: function responsive() {\n      if (!this.responsive) {\n        this.$emit(\"update:layout\", this.originalLayout);\n        this.eventBus.$emit(\"setColNum\", this.colNum);\n      }\n\n      this.onWindowResize();\n    },\n    maxRows: function maxRows() {\n      this.eventBus.$emit(\"setMaxRows\", this.maxRows);\n    },\n    margin: function margin() {\n      this.updateHeight();\n    }\n  },\n  methods: {\n    layoutUpdate: function layoutUpdate() {\n      if (this.layout !== undefined && this.originalLayout !== null) {\n        if (this.layout.length !== this.originalLayout.length) {\n          // console.log(\"### LAYOUT UPDATE!\", this.layout.length, this.originalLayout.length);\n          var diff = this.findDifference(this.layout, this.originalLayout);\n\n          if (diff.length > 0) {\n            // console.log(diff);\n            if (this.layout.length > this.originalLayout.length) {\n              this.originalLayout = this.originalLayout.concat(diff);\n            } else {\n              this.originalLayout = this.originalLayout.filter(function (obj) {\n                return !diff.some(function (obj2) {\n                  return obj.i === obj2.i;\n                });\n              });\n            }\n          }\n\n          this.lastLayoutLength = this.layout.length;\n          this.initResponsiveFeatures();\n        } //\n\n\n        compact(this.layout, this.verticalCompact);\n        this.eventBus.$emit(\"updateWidth\", this.width);\n        this.updateHeight();\n        this.$emit(\"layout-updated\", this.layout);\n      }\n    },\n    updateHeight: function updateHeight() {\n      this.mergedStyle = {\n        height: this.minH ? this.calcPosition(this.minH) + \"px\" : this.containerHeight()\n      };\n    },\n    onWindowResize: function onWindowResize() {\n      if (this.$refs !== null && this.$refs.item !== null && this.$refs.item !== undefined) {\n        this.width = this.$refs.item.offsetWidth;\n      }\n\n      this.eventBus.$emit(\"resizeEvent\");\n    },\n    containerHeight: function containerHeight() {\n      if (!this.autoSize) return; // console.log(\"bottom: \" + bottom(this.layout))\n      // console.log(\"rowHeight + margins: \" + (this.rowHeight + this.margin[1]) + this.margin[1])\n\n      var containerHeight = bottom(this.layout) * (this.rowHeight + this.margin[1]) + this.margin[1] + \"px\"; // For calculate by number of rows rather than pixels\n\n      this.$emit(\"layoutHeight\", this.calcContainerHeightByRow(bottom(this.layout) * (this.rowHeight + this.margin[1]) + this.margin[0]));\n      return containerHeight;\n    },\n    containerHeightPlacerholder: function containerHeightPlacerholder() {\n      if (!this.autoSize) return; // console.log(\"bottom: \" + bottom(this.layout))\n      // console.log(\"rowHeight + margins: \" + (this.rowHeight + this.margin[1]) + this.margin[1])\n      //   console.log(bottom(this.layout), this.rowHeight, this.margin[1])\n      //   const containerHeight =\n      //     bottom(this.layout) * (this.rowHeight + this.margin[1]) +\n      //     this.margin[1];\n\n      var calcMargin = Math.ceil((this.rowHeight + this.margin[1] + this.margin[0]) / 100);\n      return this.minH ? this.minH - calcMargin : bottom(this.layout);\n    },\n    dragEvent: function dragEvent(eventName, id, x, y, h, w) {\n      //console.log(eventName + \" id=\" + id + \", x=\" + x + \", y=\" + y);\n      var placeholderGrids = [];\n      var l = getLayoutItem(this.layout, id); //GetLayoutItem sometimes returns null object\n\n      if (l === undefined || l === null) {\n        l = {\n          x: 0,\n          y: 0\n        };\n      }\n\n      if (eventName === \"dragmove\") {\n        this.placeholder = [];\n\n        for (var row = 0; row < this.containerHeightPlacerholder() - 1; row++) {\n          for (var col = 1; col <= this.cols[this.newBreakpoint]; col++) {\n            if (row % 2 === 0) {\n              placeholderGrids.push({\n                x: col,\n                y: row,\n                w: 1,\n                h: 2,\n                i: \"row\" + row\n              });\n            } else {\n              row = row + 1;\n              placeholderGrids.push({\n                x: col,\n                y: row,\n                w: 1,\n                h: 2,\n                i: \"row\" + row\n              });\n            }\n          }\n        }\n      }\n\n      if (eventName === \"dragmove\" || eventName === \"dragstart\") {\n        this.$nextTick(function () {\n          this.isDragging = true; //   this.placeholder.length = this.containerHeightPlacerholder() -1;\n        }); //this.$broadcast(\"updateWidth\", this.width);\n\n        this.eventBus.$emit(\"updateWidth\", this.width);\n      } else {\n        this.$nextTick(function () {\n          this.isDragging = false;\n          this.placeholder = [];\n        });\n      }\n\n      if (this.placeholder.length !== placeholderGrids.length) {\n        this.placeholder = placeholderGrids;\n      } // Move the element to the dragged location.\n\n\n      this.layout = moveElement(this.layout, l, x, y, true, this.preventCollision, true); //\n\n      compact(this.layout, this.verticalCompact); // needed because vue can't detect changes on array element properties\n\n      this.eventBus.$emit(\"compact\");\n      this.updateHeight();\n      if (eventName === \"dragend\") this.$emit(\"layout-updated\", this.layout);\n    },\n    resizeEvent: function resizeEvent(eventName, id, x, y, h, w) {\n      var l = getLayoutItem(this.layout, id);\n      var placeholderGrids = []; //GetLayoutItem sometimes return null object\n\n      if (l === undefined || l === null) {\n        l = {\n          h: 0,\n          w: 0\n        };\n      }\n\n      var hasCollisions;\n\n      if (this.preventCollision) {\n        var collisions = getAllCollisions(this.layout, _objectSpread(_objectSpread({}, l), {}, {\n          w: w,\n          h: h\n        }), true).filter(function (layoutItem) {\n          return layoutItem.i !== l.i;\n        });\n        hasCollisions = collisions.length > 0; // If we're colliding, we need adjust the placeholder.\n\n        if (hasCollisions) {\n          // adjust w && h to maximum allowed space\n          var leastX = Infinity,\n              leastY = Infinity;\n          collisions.forEach(function (layoutItem) {\n            if (layoutItem.x > l.x) leastX = Math.min(leastX, layoutItem.x);\n            if (layoutItem.y > l.y) leastY = Math.min(leastY, layoutItem.y);\n          });\n          if (Number.isFinite(leastX)) l.w = leastX - l.x;\n          if (Number.isFinite(leastY)) l.h = leastY - l.y;\n        }\n      }\n\n      if (!hasCollisions) {\n        // Set new width and height.\n        l.w = w;\n        l.h = h;\n      }\n\n      if (eventName === \"resizestart\" || eventName === \"resizemove\") {\n        this.placeholder = [];\n\n        for (var row = 0; row < this.containerHeightPlacerholder() - 1; row++) {\n          for (var col = 1; col <= this.cols[this.newBreakpoint]; col++) {\n            if (row % 2 === 0) {\n              placeholderGrids.push({\n                x: col,\n                y: row,\n                w: 1,\n                h: 2,\n                i: \"row\" + row\n              });\n            } else {\n              row = row + 1;\n              placeholderGrids.push({\n                x: col,\n                y: row,\n                w: 1,\n                h: 2,\n                i: \"row\" + row\n              });\n            }\n          }\n        }\n\n        this.$nextTick(function () {\n          this.isDragging = true;\n        }); //this.$broadcast(\"updateWidth\", this.width);\n\n        this.eventBus.$emit(\"updateWidth\", this.width);\n      } else {\n        this.$nextTick(function () {\n          this.isDragging = false;\n        });\n      }\n\n      if (this.placeholder.length !== placeholderGrids.length) {\n        this.placeholder = placeholderGrids;\n      }\n\n      if (this.responsive) this.responsiveGridLayout(); //\n\n      compact(this.layout);\n      this.eventBus.$emit(\"compact\", this.verticalCompact);\n      this.updateHeight();\n      if (eventName === \"resizeend\") this.$emit(\"layout-updated\", this.layout);\n    },\n    // finds or generates new layouts for set breakpoints\n    responsiveGridLayout: function responsiveGridLayout() {\n      var newBreakpoint = getBreakpointFromWidth(this.breakpoints, this.width);\n      var newCols = getColsFromBreakpoint(newBreakpoint, this.cols);\n      this.newBreakpoint = newBreakpoint; // save actual layout in layouts\n\n      if (this.lastBreakpoint != null && !this.layouts[this.lastBreakpoint]) this.layouts[this.lastBreakpoint] = cloneLayout(this.layout); // Find or generate a new layout.\n\n      var layout = findOrGenerateResponsiveLayout(this.originalLayout, this.layouts, this.breakpoints, newBreakpoint, this.lastBreakpoint, newCols, this.verticalCompact); // Store the new layout.\n\n      this.layouts[newBreakpoint] = layout;\n\n      if (this.lastBreakpoint !== newBreakpoint) {\n        this.$emit(\"breakpoint-changed\", newBreakpoint, layout);\n      } // new prop sync\n\n\n      this.$emit(\"update:layout\", layout);\n      this.lastBreakpoint = newBreakpoint;\n      this.eventBus.$emit(\"setColNum\", getColsFromBreakpoint(newBreakpoint, this.cols));\n    },\n    // clear all responsive layouts\n    initResponsiveFeatures: function initResponsiveFeatures() {\n      // clear layouts\n      this.layouts = Object.assign({}, this.responsiveLayouts);\n    },\n    // find difference in layouts\n    findDifference: function findDifference(layout, originalLayout) {\n      //Find values that are in result1 but not in result2\n      var uniqueResultOne = layout.filter(function (obj) {\n        return !originalLayout.some(function (obj2) {\n          return obj.i === obj2.i;\n        });\n      }); //Find values that are in result2 but not in result1\n\n      var uniqueResultTwo = originalLayout.filter(function (obj) {\n        return !layout.some(function (obj2) {\n          return obj.i === obj2.i;\n        });\n      }); //Combine the two arrays of unique entries#\n\n      return uniqueResultOne.concat(uniqueResultTwo);\n    },\n    calcPosition: function calcPosition(h) {\n      var out = {\n        height: h === Infinity ? h : Math.round(this.rowHeight * h + Math.max(0, h - 1) * this.margin[1]) + this.minH\n      };\n      return out.height;\n    },\n    calcContainerHeightByRow: function calcContainerHeightByRow(h) {\n      var out = {\n        height: h === Infinity ? h : Math.round((h - this.margin[1]) / this.rowHeight)\n      };\n\n      if (out.height % 2 !== 0) {\n        out.height += 1;\n      }\n\n      return out.height;\n    }\n  }\n};",{"version":3,"sources":["GridLayout.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n  <div ref=\"item\" class=\"vue-grid-layout\" :style=\"mergedStyle\">\r\n    <slot></slot>\r\n    <!-- <grid-item\r\n      class=\"vue-grid-placeholder\"\r\n      :x=\"test.x\"\r\n      :y=\"test.y\"\r\n      :w=\"test.w\"\r\n      :h=\"test.h\"\r\n      :i=\"test.i\"\r\n    ></grid-item> -->\r\n    <grid-item\r\n      class=\"vue-grid-placeholder\"\r\n      v-for=\"(item, index) in placeholder\"\r\n      :key=\"index + 'placeholder'\"\r\n      :x=\"item.x\"\r\n      :y=\"item.y\"\r\n      :w=\"item.w\"\r\n      :h=\"item.h\"\r\n      :i=\"item.i\"\r\n    ></grid-item>\r\n  </div>\r\n</template>\r\n<style>\r\n.vue-grid-layout {\r\n  position: relative;\r\n  transition: height 200ms ease;\r\n}\r\n</style>\r\n<script>\r\nimport Vue from \"vue\";\r\nconst elementResizeDetectorMaker = require(\"element-resize-detector\");\r\n\r\nimport {\r\n  bottom,\r\n  compact,\r\n  getLayoutItem,\r\n  moveElement,\r\n  validateLayout,\r\n  cloneLayout,\r\n  getAllCollisions,\r\n  getAllowCollides,\r\n} from \"@/helpers/utils\";\r\nimport {\r\n  getBreakpointFromWidth,\r\n  getColsFromBreakpoint,\r\n  findOrGenerateResponsiveLayout,\r\n} from \"@/helpers/responsiveUtils\";\r\n//var eventBus = require('./eventBus');\r\n\r\nimport GridItem from \"./GridItem.vue\";\r\nimport {\r\n  addWindowEventListener,\r\n  removeWindowEventListener,\r\n} from \"@/helpers/DOM\";\r\n\r\nexport default {\r\n  name: \"GridLayout\",\r\n  provide() {\r\n    return {\r\n      eventBus: null,\r\n      layout: this,\r\n    };\r\n  },\r\n  components: {\r\n    GridItem,\r\n  },\r\n  props: {\r\n    // If true, the container height swells and contracts to fit contents\r\n    autoSize: {\r\n      type: Boolean,\r\n      default: true,\r\n    },\r\n    colNum: {\r\n      type: Number,\r\n      default: 12,\r\n    },\r\n    rowHeight: {\r\n      type: Number,\r\n      default: 150,\r\n    },\r\n    maxRows: {\r\n      type: Number,\r\n      default: Infinity,\r\n    },\r\n    margin: {\r\n      type: Array,\r\n      default: function() {\r\n        return [10, 10];\r\n      },\r\n    },\r\n    isDraggable: {\r\n      type: Boolean,\r\n      default: true,\r\n    },\r\n    isResizable: {\r\n      type: Boolean,\r\n      default: true,\r\n    },\r\n    isMirrored: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n    useCssTransforms: {\r\n      type: Boolean,\r\n      default: true,\r\n    },\r\n    verticalCompact: {\r\n      type: Boolean,\r\n      default: true,\r\n    },\r\n    layout: {\r\n      type: Array,\r\n      required: true,\r\n    },\r\n    responsive: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n    responsiveLayouts: {\r\n      type: Object,\r\n      default: function() {\r\n        return {};\r\n      },\r\n    },\r\n    breakpoints: {\r\n      type: Object,\r\n      default: function() {\r\n        return { lg: 1200, md: 996, sm: 768, xs: 480, xxs: 0 };\r\n      },\r\n    },\r\n    cols: {\r\n      type: Object,\r\n      default: function() {\r\n        return { lg: 12, md: 10, sm: 6, xs: 4, xxs: 2 };\r\n      },\r\n    },\r\n    preventCollision: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n    useStyleCursor: {\r\n      type: Boolean,\r\n      default: true,\r\n    },\r\n    minH: {\r\n      type: Number,\r\n      default: null,\r\n    },\r\n    allowCollides: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n  },\r\n  data: function() {\r\n    return {\r\n      width: null,\r\n      mergedStyle: {},\r\n      lastLayoutLength: 0,\r\n      isDragging: false,\r\n      newBreakpoint: \"\",\r\n      placeholder: [],\r\n      layouts: {}, // array to store all layouts from different breakpoints\r\n      lastBreakpoint: null, // store last active breakpoint\r\n      originalLayout: null, // store original Layout\r\n    };\r\n  },\r\n  created() {\r\n    const self = this;\r\n\r\n    // Accessible refernces of functions for removing in beforeDestroy\r\n    self.resizeEventHandler = function(eventType, i, x, y, h, w) {\r\n      self.resizeEvent(eventType, i, x, y, h, w);\r\n    };\r\n\r\n    self.dragEventHandler = function(eventType, i, x, y, h, w) {\r\n      self.dragEvent(eventType, i, x, y, h, w);\r\n    };\r\n\r\n    self._provided.eventBus = new Vue();\r\n    self.eventBus = self._provided.eventBus;\r\n    self.eventBus.$on(\"resizeEvent\", self.resizeEventHandler);\r\n    self.eventBus.$on(\"dragEvent\", self.dragEventHandler);\r\n    self.$emit(\"layout-created\", self.layout);\r\n    getAllowCollides(this.allowCollides);\r\n  },\r\n  beforeDestroy: function() {\r\n    //Remove listeners\r\n    this.eventBus.$off(\"resizeEvent\", this.resizeEventHandler);\r\n    this.eventBus.$off(\"dragEvent\", this.dragEventHandler);\r\n    this.eventBus.$destroy();\r\n    removeWindowEventListener(\"resize\", this.onWindowResize);\r\n    if (this.erd) {\r\n      this.erd.uninstall(this.$refs.item);\r\n    }\r\n  },\r\n  beforeMount: function() {\r\n    this.$emit(\"layout-before-mount\", this.layout);\r\n  },\r\n  mounted: function() {\r\n    this.$emit(\"layout-mounted\", this.layout);\r\n    this.$nextTick(function() {\r\n      validateLayout(this.layout);\r\n\r\n      this.originalLayout = this.layout;\r\n      const self = this;\r\n      this.$nextTick(function() {\r\n        self.onWindowResize();\r\n\r\n        self.initResponsiveFeatures();\r\n\r\n        //self.width = self.$el.offsetWidth;\r\n        addWindowEventListener(\"resize\", self.onWindowResize);\r\n\r\n        //\r\n        compact(self.layout, self.verticalCompact);\r\n\r\n        self.$emit(\"layout-updated\", self.layout);\r\n\r\n        self.updateHeight();\r\n        self.$nextTick(function() {\r\n          this.erd = elementResizeDetectorMaker({\r\n            strategy: \"scroll\", //<- For ultra performance.\r\n            // See https://github.com/wnr/element-resize-detector/issues/110 about callOnAdd.\r\n            callOnAdd: false,\r\n          });\r\n          this.erd.listenTo(self.$refs.item, function() {\r\n            self.onWindowResize();\r\n          });\r\n        });\r\n      });\r\n    });\r\n  },\r\n  watch: {\r\n    width: function(newval, oldval) {\r\n      const self = this;\r\n      this.$nextTick(function() {\r\n        //this.$broadcast(\"updateWidth\", this.width);\r\n        this.eventBus.$emit(\"updateWidth\", this.width);\r\n        if (oldval === null) {\r\n          /*\r\n                            If oldval == null is when the width has never been\r\n                            set before. That only occurs when mouting is\r\n                            finished, and onWindowResize has been called and\r\n                            this.width has been changed the first time after it\r\n                            got set to null in the constructor. It is now time\r\n                            to issue layout-ready events as the GridItems have\r\n                            their sizes configured properly.\r\n\r\n                            The reason for emitting the layout-ready events on\r\n                            the next tick is to allow for the newly-emitted\r\n                            updateWidth event (above) to have reached the\r\n                            children GridItem-s and had their effect, so we're\r\n                            sure that they have the final size before we emit\r\n                            layout-ready (for this GridLayout) and\r\n                            item-layout-ready (for the GridItem-s).\r\n\r\n                            This way any client event handlers can reliably\r\n                            invistigate stable sizes of GridItem-s.\r\n                        */\r\n          this.$nextTick(() => {\r\n            this.$emit(\"layout-ready\", self.layout);\r\n          });\r\n        }\r\n        this.updateHeight();\r\n      });\r\n    },\r\n    layout: function() {\r\n      this.layoutUpdate();\r\n    },\r\n    colNum: function(val) {\r\n      this.eventBus.$emit(\"setColNum\", val);\r\n    },\r\n    rowHeight: function() {\r\n      this.eventBus.$emit(\"setRowHeight\", this.rowHeight);\r\n    },\r\n    isDraggable: function() {\r\n      this.eventBus.$emit(\"setDraggable\", this.isDraggable);\r\n    },\r\n    isResizable: function() {\r\n      this.eventBus.$emit(\"setResizable\", this.isResizable);\r\n    },\r\n    responsive() {\r\n      if (!this.responsive) {\r\n        this.$emit(\"update:layout\", this.originalLayout);\r\n        this.eventBus.$emit(\"setColNum\", this.colNum);\r\n      }\r\n      this.onWindowResize();\r\n    },\r\n    maxRows: function() {\r\n      this.eventBus.$emit(\"setMaxRows\", this.maxRows);\r\n    },\r\n    margin() {\r\n      this.updateHeight();\r\n    },\r\n  },\r\n  methods: {\r\n    layoutUpdate() {\r\n      if (this.layout !== undefined && this.originalLayout !== null) {\r\n        if (this.layout.length !== this.originalLayout.length) {\r\n          // console.log(\"### LAYOUT UPDATE!\", this.layout.length, this.originalLayout.length);\r\n\r\n          let diff = this.findDifference(this.layout, this.originalLayout);\r\n          if (diff.length > 0) {\r\n            // console.log(diff);\r\n            if (this.layout.length > this.originalLayout.length) {\r\n              this.originalLayout = this.originalLayout.concat(diff);\r\n            } else {\r\n              this.originalLayout = this.originalLayout.filter((obj) => {\r\n                return !diff.some((obj2) => {\r\n                  return obj.i === obj2.i;\r\n                });\r\n              });\r\n            }\r\n          }\r\n\r\n          this.lastLayoutLength = this.layout.length;\r\n          this.initResponsiveFeatures();\r\n        }\r\n\r\n        //\r\n        compact(this.layout, this.verticalCompact);\r\n        this.eventBus.$emit(\"updateWidth\", this.width);\r\n        this.updateHeight();\r\n\r\n        this.$emit(\"layout-updated\", this.layout);\r\n      }\r\n    },\r\n    updateHeight: function() {\r\n      this.mergedStyle = {\r\n        height: this.minH\r\n          ? this.calcPosition(this.minH) + \"px\"\r\n          : this.containerHeight(),\r\n      };\r\n    },\r\n    onWindowResize: function() {\r\n      if (\r\n        this.$refs !== null &&\r\n        this.$refs.item !== null &&\r\n        this.$refs.item !== undefined\r\n      ) {\r\n        this.width = this.$refs.item.offsetWidth;\r\n      }\r\n      this.eventBus.$emit(\"resizeEvent\");\r\n    },\r\n    containerHeight: function() {\r\n      if (!this.autoSize) return;\r\n      // console.log(\"bottom: \" + bottom(this.layout))\r\n      // console.log(\"rowHeight + margins: \" + (this.rowHeight + this.margin[1]) + this.margin[1])\r\n      const containerHeight =\r\n        bottom(this.layout) * (this.rowHeight + this.margin[1]) +\r\n        this.margin[1] +\r\n        \"px\";\r\n      // For calculate by number of rows rather than pixels\r\n      this.$emit(\r\n        \"layoutHeight\",\r\n        this.calcContainerHeightByRow(\r\n          bottom(this.layout) * (this.rowHeight + this.margin[1]) +\r\n            this.margin[0]\r\n        )\r\n      );\r\n      return containerHeight;\r\n    },\r\n    containerHeightPlacerholder: function() {\r\n      if (!this.autoSize) return;\r\n      // console.log(\"bottom: \" + bottom(this.layout))\r\n      // console.log(\"rowHeight + margins: \" + (this.rowHeight + this.margin[1]) + this.margin[1])\r\n      //   console.log(bottom(this.layout), this.rowHeight, this.margin[1])\r\n      //   const containerHeight =\r\n      //     bottom(this.layout) * (this.rowHeight + this.margin[1]) +\r\n      //     this.margin[1];\r\n      const calcMargin = Math.ceil(\r\n        (this.rowHeight + this.margin[1] + this.margin[0]) / 100\r\n      );\r\n      return this.minH ? this.minH - calcMargin : bottom(this.layout);\r\n    },\r\n    dragEvent: function(eventName, id, x, y, h, w) {\r\n      //console.log(eventName + \" id=\" + id + \", x=\" + x + \", y=\" + y);\r\n      const placeholderGrids = [];\r\n      let l = getLayoutItem(this.layout, id);\r\n      //GetLayoutItem sometimes returns null object\r\n      if (l === undefined || l === null) {\r\n        l = { x: 0, y: 0 };\r\n      }\r\n      if (eventName === \"dragmove\") {\r\n        this.placeholder = [];\r\n        for (let row = 0; row < this.containerHeightPlacerholder() - 1; row++) {\r\n          for (let col = 1; col <= this.cols[this.newBreakpoint]; col++) {\r\n            if (row % 2 === 0) {\r\n              placeholderGrids.push({\r\n                x: col,\r\n                y: row,\r\n                w: 1,\r\n                h: 2,\r\n                i: \"row\" + row,\r\n              });\r\n            } else {\r\n              row = row + 1;\r\n              placeholderGrids.push({\r\n                x: col,\r\n                y: row,\r\n                w: 1,\r\n                h: 2,\r\n                i: \"row\" + row,\r\n              });\r\n            }\r\n          }\r\n        }\r\n      }\r\n      if (eventName === \"dragmove\" || eventName === \"dragstart\") {\r\n        this.$nextTick(function() {\r\n          this.isDragging = true;\r\n          //   this.placeholder.length = this.containerHeightPlacerholder() -1;\r\n        });\r\n        //this.$broadcast(\"updateWidth\", this.width);\r\n        this.eventBus.$emit(\"updateWidth\", this.width);\r\n      } else {\r\n        this.$nextTick(function() {\r\n          this.isDragging = false;\r\n          this.placeholder = [];\r\n        });\r\n      }\r\n      if (this.placeholder.length !== placeholderGrids.length) {\r\n        this.placeholder = placeholderGrids;\r\n      }\r\n      // Move the element to the dragged location.\r\n      this.layout = moveElement(\r\n        this.layout,\r\n        l,\r\n        x,\r\n        y,\r\n        true,\r\n        this.preventCollision,\r\n        true\r\n      );\r\n      //\r\n      compact(this.layout, this.verticalCompact);\r\n      // needed because vue can't detect changes on array element properties\r\n      this.eventBus.$emit(\"compact\");\r\n      this.updateHeight();\r\n      if (eventName === \"dragend\") this.$emit(\"layout-updated\", this.layout);\r\n    },\r\n    resizeEvent: function(eventName, id, x, y, h, w) {\r\n      let l = getLayoutItem(this.layout, id);\r\n      const placeholderGrids = [];\r\n      //GetLayoutItem sometimes return null object\r\n      if (l === undefined || l === null) {\r\n        l = { h: 0, w: 0 };\r\n      }\r\n\r\n      let hasCollisions;\r\n      if (this.preventCollision) {\r\n        const collisions = getAllCollisions(\r\n          this.layout,\r\n          { ...l, w, h },\r\n          true\r\n        ).filter((layoutItem) => layoutItem.i !== l.i);\r\n        hasCollisions = collisions.length > 0;\r\n\r\n        // If we're colliding, we need adjust the placeholder.\r\n        if (hasCollisions) {\r\n          // adjust w && h to maximum allowed space\r\n          let leastX = Infinity,\r\n            leastY = Infinity;\r\n          collisions.forEach((layoutItem) => {\r\n            if (layoutItem.x > l.x) leastX = Math.min(leastX, layoutItem.x);\r\n            if (layoutItem.y > l.y) leastY = Math.min(leastY, layoutItem.y);\r\n          });\r\n          if (Number.isFinite(leastX)) l.w = leastX - l.x;\r\n          if (Number.isFinite(leastY)) l.h = leastY - l.y;\r\n        }\r\n      }\r\n\r\n      if (!hasCollisions) {\r\n        // Set new width and height.\r\n        l.w = w;\r\n        l.h = h;\r\n      }\r\n\r\n      if (eventName === \"resizestart\" || eventName === \"resizemove\") {\r\n        this.placeholder = [];\r\n        for (let row = 0; row < this.containerHeightPlacerholder() - 1; row++) {\r\n          for (let col = 1; col <= this.cols[this.newBreakpoint]; col++) {\r\n            if (row % 2 === 0) {\r\n              placeholderGrids.push({\r\n                x: col,\r\n                y: row,\r\n                w: 1,\r\n                h: 2,\r\n                i: \"row\" + row,\r\n              });\r\n            } else {\r\n              row = row + 1;\r\n              placeholderGrids.push({\r\n                x: col,\r\n                y: row,\r\n                w: 1,\r\n                h: 2,\r\n                i: \"row\" + row,\r\n              });\r\n            }\r\n          }\r\n        }\r\n        this.$nextTick(function() {\r\n          this.isDragging = true;\r\n        });\r\n        //this.$broadcast(\"updateWidth\", this.width);\r\n        this.eventBus.$emit(\"updateWidth\", this.width);\r\n      } else {\r\n        this.$nextTick(function() {\r\n          this.isDragging = false;\r\n        });\r\n      }\r\n      if (this.placeholder.length !== placeholderGrids.length) {\r\n        this.placeholder = placeholderGrids;\r\n      }\r\n      if (this.responsive) this.responsiveGridLayout();\r\n\r\n      //\r\n      compact(this.layout);\r\n      this.eventBus.$emit(\"compact\", this.verticalCompact);\r\n      this.updateHeight();\r\n\r\n      if (eventName === \"resizeend\") this.$emit(\"layout-updated\", this.layout);\r\n    },\r\n\r\n    // finds or generates new layouts for set breakpoints\r\n    responsiveGridLayout() {\r\n      let newBreakpoint = getBreakpointFromWidth(this.breakpoints, this.width);\r\n      let newCols = getColsFromBreakpoint(newBreakpoint, this.cols);\r\n      this.newBreakpoint = newBreakpoint;\r\n\r\n      // save actual layout in layouts\r\n      if (this.lastBreakpoint != null && !this.layouts[this.lastBreakpoint])\r\n        this.layouts[this.lastBreakpoint] = cloneLayout(this.layout);\r\n\r\n      // Find or generate a new layout.\r\n      let layout = findOrGenerateResponsiveLayout(\r\n        this.originalLayout,\r\n        this.layouts,\r\n        this.breakpoints,\r\n        newBreakpoint,\r\n        this.lastBreakpoint,\r\n        newCols,\r\n        this.verticalCompact\r\n      );\r\n      // Store the new layout.\r\n      this.layouts[newBreakpoint] = layout;\r\n\r\n      if (this.lastBreakpoint !== newBreakpoint) {\r\n        this.$emit(\"breakpoint-changed\", newBreakpoint, layout);\r\n      }\r\n      // new prop sync\r\n      this.$emit(\"update:layout\", layout);\r\n\r\n      this.lastBreakpoint = newBreakpoint;\r\n      this.eventBus.$emit(\r\n        \"setColNum\",\r\n        getColsFromBreakpoint(newBreakpoint, this.cols)\r\n      );\r\n    },\r\n\r\n    // clear all responsive layouts\r\n    initResponsiveFeatures() {\r\n      // clear layouts\r\n      this.layouts = Object.assign({}, this.responsiveLayouts);\r\n    },\r\n\r\n    // find difference in layouts\r\n    findDifference(layout, originalLayout) {\r\n      //Find values that are in result1 but not in result2\r\n      let uniqueResultOne = layout.filter(function(obj) {\r\n        return !originalLayout.some(function(obj2) {\r\n          return obj.i === obj2.i;\r\n        });\r\n      });\r\n\r\n      //Find values that are in result2 but not in result1\r\n      let uniqueResultTwo = originalLayout.filter(function(obj) {\r\n        return !layout.some(function(obj2) {\r\n          return obj.i === obj2.i;\r\n        });\r\n      });\r\n\r\n      //Combine the two arrays of unique entries#\r\n      return uniqueResultOne.concat(uniqueResultTwo);\r\n    },\r\n    calcPosition: function(h) {\r\n      let out = {\r\n        height:\r\n          h === Infinity\r\n            ? h\r\n            : Math.round(\r\n                this.rowHeight * h + Math.max(0, h - 1) * this.margin[1]\r\n              ) + this.minH,\r\n      };\r\n      return out.height;\r\n    },\r\n    calcContainerHeightByRow: function(h) {\r\n      let out = {\r\n        height:\r\n          h === Infinity\r\n            ? h\r\n            : Math.round((h - this.margin[1]) / this.rowHeight),\r\n      };\r\n\r\n      if (out.height % 2 !== 0) {\r\n        out.height += 1;\r\n      }\r\n      return out.height;\r\n    },\r\n  },\r\n};\r\n</script>\r\n"],"sourceRoot":"src/components"}]}