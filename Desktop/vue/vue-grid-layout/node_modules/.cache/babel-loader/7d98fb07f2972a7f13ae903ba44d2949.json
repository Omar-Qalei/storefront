{"remainingRequest":"C:\\Users\\omar-\\Desktop\\vue\\vue-grid-layout\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\omar-\\Desktop\\vue\\vue-grid-layout\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\omar-\\Desktop\\vue\\vue-grid-layout\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\Users\\omar-\\Desktop\\vue\\vue-grid-layout\\src\\helpers\\draggableUtils.js","dependencies":[{"path":"C:\\Users\\omar-\\Desktop\\vue\\vue-grid-layout\\src\\helpers\\draggableUtils.js","mtime":1610648031000},{"path":"C:\\Users\\omar-\\Desktop\\vue\\vue-grid-layout\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\omar-\\Desktop\\vue\\vue-grid-layout\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\omar-\\Desktop\\vue\\vue-grid-layout\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Users\\omar-\\Desktop\\vue\\vue-grid-layout\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["// Get {x, y} positions from event.\nexport function getControlPosition(e) {\n  return offsetXYFromParentOf(e);\n} // Get from offsetParent\n\nexport function offsetXYFromParentOf(evt) {\n  var offsetParent = evt.target.offsetParent || document.body;\n  var offsetParentRect = evt.offsetParent === document.body ? {\n    left: 0,\n    top: 0\n  } : offsetParent.getBoundingClientRect();\n  var x = evt.clientX + offsetParent.scrollLeft - offsetParentRect.left;\n  var y = evt.clientY + offsetParent.scrollTop - offsetParentRect.top;\n  /*const x = Math.round(evt.clientX + offsetParent.scrollLeft - offsetParentRect.left);\r\n  const y = Math.round(evt.clientY + offsetParent.scrollTop - offsetParentRect.top);*/\n\n  return {\n    x: x,\n    y: y\n  };\n} // Create an data object exposed by <DraggableCore>'s events\n\nexport function createCoreData(lastX, lastY, x, y) {\n  // State changes are often (but not always!) async. We want the latest value.\n  var isStart = !isNum(lastX);\n\n  if (isStart) {\n    // If this is our first move, use the x and y as last coords.\n    return {\n      deltaX: 0,\n      deltaY: 0,\n      lastX: x,\n      lastY: y,\n      x: x,\n      y: y\n    };\n  } else {\n    // Otherwise calculate proper values.\n    return {\n      deltaX: x - lastX,\n      deltaY: y - lastY,\n      lastX: lastX,\n      lastY: lastY,\n      x: x,\n      y: y\n    };\n  }\n}\n\nfunction isNum(num) {\n  return typeof num === 'number' && !isNaN(num);\n}",{"version":3,"sources":["C:/Users/omar-/Desktop/vue/vue-grid-layout/src/helpers/draggableUtils.js"],"names":["getControlPosition","e","offsetXYFromParentOf","evt","offsetParent","target","document","body","offsetParentRect","left","top","getBoundingClientRect","x","clientX","scrollLeft","y","clientY","scrollTop","createCoreData","lastX","lastY","isStart","isNum","deltaX","deltaY","num","isNaN"],"mappings":"AAAA;AACA,OAAO,SAASA,kBAAT,CAA4BC,CAA5B,EAA+B;AAClC,SAAOC,oBAAoB,CAACD,CAAD,CAA3B;AACH,C,CAGD;;AACA,OAAO,SAASC,oBAAT,CAA8BC,GAA9B,EAAmC;AACtC,MAAMC,YAAY,GAAGD,GAAG,CAACE,MAAJ,CAAWD,YAAX,IAA2BE,QAAQ,CAACC,IAAzD;AACA,MAAMC,gBAAgB,GAAGL,GAAG,CAACC,YAAJ,KAAqBE,QAAQ,CAACC,IAA9B,GAAqC;AAACE,IAAAA,IAAI,EAAE,CAAP;AAAUC,IAAAA,GAAG,EAAE;AAAf,GAArC,GAAyDN,YAAY,CAACO,qBAAb,EAAlF;AAEA,MAAMC,CAAC,GAAGT,GAAG,CAACU,OAAJ,GAAcT,YAAY,CAACU,UAA3B,GAAwCN,gBAAgB,CAACC,IAAnE;AACA,MAAMM,CAAC,GAAGZ,GAAG,CAACa,OAAJ,GAAcZ,YAAY,CAACa,SAA3B,GAAuCT,gBAAgB,CAACE,GAAlE;AAEA;AACJ;;AAGI,SAAO;AAACE,IAAAA,CAAC,EAADA,CAAD;AAAIG,IAAAA,CAAC,EAADA;AAAJ,GAAP;AACH,C,CAGD;;AACA,OAAO,SAASG,cAAT,CAAwBC,KAAxB,EAA+BC,KAA/B,EAAsCR,CAAtC,EAAyCG,CAAzC,EAA4C;AAC/C;AACA,MAAMM,OAAO,GAAG,CAACC,KAAK,CAACH,KAAD,CAAtB;;AAEA,MAAIE,OAAJ,EAAa;AACT;AACA,WAAO;AACHE,MAAAA,MAAM,EAAE,CADL;AACQC,MAAAA,MAAM,EAAE,CADhB;AAEHL,MAAAA,KAAK,EAAEP,CAFJ;AAEOQ,MAAAA,KAAK,EAAEL,CAFd;AAGHH,MAAAA,CAAC,EAAEA,CAHA;AAGGG,MAAAA,CAAC,EAAEA;AAHN,KAAP;AAKH,GAPD,MAOO;AACH;AACA,WAAO;AACHQ,MAAAA,MAAM,EAAEX,CAAC,GAAGO,KADT;AACgBK,MAAAA,MAAM,EAAET,CAAC,GAAGK,KAD5B;AAEHD,MAAAA,KAAK,EAAEA,KAFJ;AAEWC,MAAAA,KAAK,EAAEA,KAFlB;AAGHR,MAAAA,CAAC,EAAEA,CAHA;AAGGG,MAAAA,CAAC,EAAEA;AAHN,KAAP;AAKH;AACJ;;AAGD,SAASO,KAAT,CAAeG,GAAf,EAAqB;AACjB,SAAO,OAAOA,GAAP,KAAe,QAAf,IAA2B,CAACC,KAAK,CAACD,GAAD,CAAxC;AACH","sourcesContent":["// Get {x, y} positions from event.\r\nexport function getControlPosition(e) {\r\n    return offsetXYFromParentOf(e);\r\n}\r\n\r\n\r\n// Get from offsetParent\r\nexport function offsetXYFromParentOf(evt) {\r\n    const offsetParent = evt.target.offsetParent || document.body;\r\n    const offsetParentRect = evt.offsetParent === document.body ? {left: 0, top: 0} : offsetParent.getBoundingClientRect();\r\n\r\n    const x = evt.clientX + offsetParent.scrollLeft - offsetParentRect.left;\r\n    const y = evt.clientY + offsetParent.scrollTop - offsetParentRect.top;\r\n\r\n    /*const x = Math.round(evt.clientX + offsetParent.scrollLeft - offsetParentRect.left);\r\n    const y = Math.round(evt.clientY + offsetParent.scrollTop - offsetParentRect.top);*/\r\n\r\n\r\n    return {x, y};\r\n}\r\n\r\n\r\n// Create an data object exposed by <DraggableCore>'s events\r\nexport function createCoreData(lastX, lastY, x, y) {\r\n    // State changes are often (but not always!) async. We want the latest value.\r\n    const isStart = !isNum(lastX);\r\n\r\n    if (isStart) {\r\n        // If this is our first move, use the x and y as last coords.\r\n        return {\r\n            deltaX: 0, deltaY: 0,\r\n            lastX: x, lastY: y,\r\n            x: x, y: y\r\n        };\r\n    } else {\r\n        // Otherwise calculate proper values.\r\n        return {\r\n            deltaX: x - lastX, deltaY: y - lastY,\r\n            lastX: lastX, lastY: lastY,\r\n            x: x, y: y\r\n        };\r\n    }\r\n}\r\n\r\n\r\nfunction isNum(num)  {\r\n    return typeof num === 'number' && !isNaN(num);\r\n}\r\n\r\n"]}]}